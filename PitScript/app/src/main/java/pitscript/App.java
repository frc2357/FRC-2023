/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pitscript;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.function.Consumer;

import ch.ethz.ssh2.Connection;
import ch.ethz.ssh2.SFTPv3Client;
import ch.ethz.ssh2.ServerHostKeyVerifier;
import ch.ethz.ssh2.sftp.*;

public class App {

    public static String remoteHost = "10.23.57.2";
    public static String username = "admin";
    public static String password = "";
    public static String command = "dir *.wpilog";
    public Connection conn;

    public static void main(String[] args) {
        boolean isWindows = System.getProperty("os.name")
                .toLowerCase().startsWith("windows");
        ProcessBuilder pBuilder = new ProcessBuilder();
        try {
            Process process = Runtime.getRuntime().exec("java");
            sshAndDownload(remoteHost, "", username, password);
        } catch (IOException e) {
            System.out.println("they broke somewhere");
            e.printStackTrace();
            // SFTPv3Client();
        }
        // try {
        // Process process = Runtime.getRuntime().exec(new SFTPv3Client());
        // StreamGobbler streamGobbler =
        // new StreamGobbler(process.getInputStream(), System.out::println);
        // Future<?> future = Executors.newSingleThreadExecutor().submit(streamGobbler);
        // int exitCode = process.waitFor();
        // assert exitCode == 0;
        // future.get(10, TimeUnit.SECONDS);
        // } catch (InterruptedException | ExecutionException | TimeoutException |
        // IOException e) {
        // System.out.println("one of the things broke. you should make this more
        // specific. maybe.");
        // e.printStackTrace();
        // }

    }
    //code below might work for the SFTPClient, once the connection can actually connect to it.
            //System.out.println("Setting up the SFTPClient -------");
            // SFTPv3Client sftpClient = new SFTPv3Client(conn);
            // System.out.println("the SFTPClient was set up right --------");
    public static void sshAndDownload(String serverIp, String command, String usernameString, String password)
            throws IOException {
        Consumer<String> stringConsumer = null;
        try {
            Connection conn = new Connection(serverIp);
            System.out.println("Connecting");
            conn.connect(null, 20000,20000);
            System.out.println("Connected");
            boolean isAuthenticated = conn.authenticateWithPassword(usernameString, password);
            if (isAuthenticated == false)
                throw new IOException("Authentication failed.");
            ch.ethz.ssh2.Session sess = conn.openSession();
            sess.execCommand(command);
            InputStream stdout = new ch.ethz.ssh2.StreamGobbler(sess.getStdout());
            BufferedReader br = new BufferedReader(new InputStreamReader(stdout));
            System.out.println("the output of the command is");
            int i =1;
            while (true) {
                String line = br.readLine();
                if (line == null)
                    break;
                System.out.println(line);
                String[] lineList= {line};
                lineList[i] = line; i++;
            }
            // SFTPv3Client sftpClient = new SFTPv3Client(conn);
            System.out.println("ExitCode: " + sess.getExitStatus());
            sess.close();
            conn.close();
        } catch (IOException e) {
            e.printStackTrace(System.err);

        }
    }

    public static class StreamGobbler implements Runnable {
        private InputStream inputStream;
        private Consumer<String> consumer;

        public StreamGobbler(InputStream inputStream, Consumer<String> consumer) {
            this.inputStream = inputStream;
            this.consumer = consumer;
        }

        @Override
        public void run() {
            new BufferedReader(new InputStreamReader(inputStream)).lines()
                    .forEach(consumer);
        }
    }

}
